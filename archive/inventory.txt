import discord, asyncio
from discord.ext import commands
from typing import Optional
from datetime import datetime, timedelta

from database.main import *
from backend.items import items as all_items


embed_colors = {}
for key, value in all_items['embed_colors'].items():
	embed_colors[value['icon']] = key


class Inv_dropdown(discord.ui.View):
	def __init__(self, author):
		self.value = None
		self.author = author
		super().__init__()

	options = [
		discord.SelectOption(label="Discs", description="Discs you own"),
		discord.SelectOption(label="Backgrounds", description="Backgrounds you own"),
		discord.SelectOption(label="Embed colors", description="Embed colors you own"),
	]

	async def interaction_check(self, interaction : discord.Interaction):
		return interaction.user.id == self.author.id
	
	@discord.ui.select(placeholder="Select", min_values=1, max_values=1, options=options)
	async def callback(self, select : discord.ui.Select, interaction : discord.Interaction):
		self.value = select.values[0]
		self.stop()


class Inv_buttons(discord.ui.View):
	def __init__(self, author):
		self.value = None
		self.author = author
		super().__init__()

	async def interaction_check(self, interaction : discord.Interaction):
		return interaction.user.id == self.author.id

	@discord.ui.button(label="◀", style=discord.ButtonStyle.gray)
	async def previous(self, button : discord.Button, interaction : discord.Interaction):
		self.value = "previous"
		await interaction.response.edit_message(view=self)
		self.stop()

	@discord.ui.button(label="Use", style=discord.ButtonStyle.blurple)
	async def use(self, button : discord.Button, interaction : discord.Interaction):
		self.value = "use"
		await interaction.response.edit_message(view=self)
		self.stop()

	@discord.ui.button(label="▶", style=discord.ButtonStyle.gray)
	async def next(self, button : discord.Button, interaction : discord.Interaction):
		self.value = "next"
		await interaction.response.edit_message(view=self)
		self.stop()


class Discs_view(discord.ui.View):
	def __init__(self, author):
		super().__init__()
		self.value = None
		self.author = author

	async def interaction_check(self, interaction : discord.Interaction):
		return interaction.user.id == self.author.id

	@discord.ui.button(label="primary", style=discord.ButtonStyle.blurple)
	async def primary(self, button : discord.Button, interaction : discord.Interaction):
		self.value = "primary"
		await interaction.response.edit_message(view=self)
		self.stop()

	@discord.ui.button(label="secondary", style=discord.ButtonStyle.blurple)
	async def secondary(self, button : discord.Button, interaction : discord.Interaction):
		self.value = "secondary"
		await interaction.response.edit_message(view=self)
		self.stop()


class Inventory(commands.Cog):
	def __init__(self, bot):
		self.bot = bot


	@commands.command(aliases=['inv'])
	async def inventory(self, ctx, member : Optional[discord.User] = None):
		user = ctx.author if not member else member
		user = User.find(User.ID == str(user.id)).first()

		view = Inv_dropdown(ctx.author)
		embed = discord.Embed(title="Inventory", color=int("5261f8", 16))
		msg = await ctx.send(embed=embed, view=view)
		await view.wait()

		if view.value == None: 
			await msg.edit(content="Request timed-out", delete_after=5)
			return

		category = view.value.lower() if view.value.lower() != "embed colors" else view.value.lower().replace(' ', '_')
		items = user.inventory[category]
		page = 0

		while True:
			page_items = []
			description = ""

			for i in range((page * 10), len(items)):
				if (i > (page * 10) and page > 0) or (i > len(items)): break

				if items[i] in list(embed_colors.keys()): items[i] = embed_colors[items[i]]

				page_items.append(items[i])

				name = items[i].replace('_', ' ') if '_' in items[i] else items[i]
				description += f"{name.capitalize()} - {all_items[category][items[i]]['icon']}\n"

			embed = discord.Embed(title=f"Inventory - {category.capitalize()}", description=description, color=int("5261f8", 16))
			embed.set_footer(text= f"Page: {page}/{round(len(items) / 10)}")

			view = Inv_buttons(ctx.author)
			view.next.disabled = True if ((page * 10) >= len(items)) or (len(items) < 10) else False
			view.use.disabled = True if len(page_items) <= 0 else False
			view.previous.disabled = True if page <= 1 else False

			msg = await ctx.send(embed=embed, view=view)
			await view.wait()

			if view.value == None: 
				await msg.edit(content="Request timed-out", delete_after=5)
				return

			if view.value == "next": page += 1; continue
			if view.value == "previous": page -= 1; continue

			if view.value == "use": break

		def check(m):
			return m.guild.id == ctx.guild.id and m.channel.id == ctx.channel.id and m.author.id == ctx.author.id and (m.content.lower().replace(' ', '_') in page_items or m.content.lower() in page_items)

		msg = await msg.edit(content="What would you like to use?")

		try: message = await self.bot.wait_for('message', check=check, timeout=60)
		except asyncio.TimeoutError:
			await msg.edit(content="Request timed-out", delete_after=5)
			return
		else: item_to_use = message.content.lower().replace(' ', '_') if category != "embed_colors" else message.content.lower()

		if category == "backgrounds":
			user.update(background=all_items[category][item_to_use]['icon'])
			
			name = item_to_use.replace('_', ' ') if '_' in item_to_use else item_to_use
			confirm_msg = f"Used {name.capitalize()} as {category.capitalize()}"

		if category == "embed_colors":
			user.update(embed_color=all_items[category][item_to_use]['icon'])
			confirm_msg = f"Used {item_to_use.capitalize()} as {category.replace('_', ' ').capitalize()}"
		
		if category == "discs":
			view = Discs_view(ctx.author)
			await msg.edit(embed=embed, view=view)
			await view.wait()

			if view.value == None:
				await msg.edit(content="Request timed-out", delete_after=5)
				return

			if view.value == "primary": user.update(primary_disc=all_items[category][item_to_use]['icon'])
			if view.value == "secondary": user.update(secondary_disc=all_items[category][item_to_use]['icon'])

			name = item_to_use.replace('_', ' ') if '_' in item_to_use else item_to_use
			confirm_msg = f"Used {name.capitalize()} as {view.value.capitalize()}"

		embed = discord.Embed(title=confirm_msg, color=int("5261f8", 16))

		await ctx.send(embed=embed, delete_after=15)


def setup(bot):
	bot.add_cog(Inventory(bot))