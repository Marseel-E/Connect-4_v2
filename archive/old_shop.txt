import discord, asyncio
from discord.ext import commands
from typing import Optional

from database.main import *
from backend.items import items as all_items


embed_colors = {}
for key, value in all_items['embed_colors'].items():
	embed_colors[value['icon']] = key


class Shop_dropdown(discord.ui.View):
	def __init__(self, author):
		super().__init__()
		self.value = None
		self.author = author

	options = [
		discord.SelectOption(label="Discs", description="Shop discs"),
		discord.SelectOption(label="Backgrounds", description="Shop backgrounds"),
		discord.SelectOption(label="Embed colors", description="Shop embed colors"),
	]

	async def interaction_check(self, interaction : discord.Interaction):
		return interaction.user.id == self.author.id
	
	@discord.ui.select(placeholder="Select", min_values=1, max_values=1, options=options)
	async def callback(self, select : discord.ui.Select, interaction : discord.Interaction):
		self.value = select.values[0]
		self.stop()


class Shop_buy_dropdown(discord.ui.Select):
	def __init__(self, user, items):
		self.user = user
		self.items = items

		options = [discord.SelectOption(label=key.capitalize(), description=f"{value['price']} :coin:") for key, value in self.items.items() if (value['price'] < self.user.coins) and (value['price'] > 0)]

		super().__init__(placeholder='Buy', min_values=1, max_values=1, options=options)

	async def callback(self, interaction: discord.Interaction):
		item = self.values[0]
		new_inventory = user.inventory
		new_inventory['discs']
		user.update(inventory=new_inventory)
		user.update(coins=user.coins - self.items[item.lower()]['price'])
		await interaction.response.send_message(f"You bought {item} for {self.items[item.lower()]['price']} :coin:")



class Shop_buy(discord.ui.View):
	def __init__(self, author, user, items):
		super().__init__()
		self.value = None
		self.author = author

		self.add_item(Shop_buy_dropdown(user, items))

	async def interaction_check(self, interaction : discord.Interaction):
		return interaction.user.id == self.author.id


class Shop(commands.Cog):
	def __init__(self, bot):
		self.bot = bot


	@commands.command(aliases=['s'])
	async def shop(self, ctx, page : Optional[int] = 0):
		user = User.find(User.ID == str(ctx.author.id)).first()

		embed = discord.Embed(title="Shop", description=f":coin: Coins: `{user.coins}`", color=int("5261f8", 16))
		embed.set_footer(text="Connect 4 © 2021")

		view = Shop_dropdown(ctx.author)
		msg = await ctx.send(embed=embed, view=view)
		await view.wait()

		if view.value == None:
			await msg.edit(content="Request timed-out", delete_after=5)
			return

		category = view.value.lower() if view.value.lower() != "embed colors" else view.value.lower().replace(' ', '_')
		items = all_items[category]
		description = ""
		can_afford = 0

		for key, value in items.items():
			if (value['price'] > 0) and (value['price'] <= user.coins): can_afford += 1

			name = key.replace('_', ' ') if '_' in key else key
			price = "`(owned)`" if (key in user.inventory[category]) or (value['price'] <= 0) else f"**({value['price']} :coin:)**"
			description += f"{value['icon']} - `{name.capitalize()}` {price}\n"

		embed.set_footer(text="Connect 4 © 2021")
		embed.description = description
		
		if can_afford <= 0:
			view.clear_items()
			await msg.edit(content="You can't afford anything", embed=embed, delete_after=120, view=view)
			return

		view = Shop_buy(ctx.author, user, items)
		await msg.edit(embed=embed, view=view)
		await view.wait()
		await msg.delete()


def setup(bot):
	bot.add_cog(Shop(bot))